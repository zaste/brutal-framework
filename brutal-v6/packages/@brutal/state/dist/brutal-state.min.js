function t(t){const e={},n={};for(const[o,c]of Object.entries(t))"function"==typeof c?n[o]=c:e[o]=c;const o=new Set;return new Proxy(e,{get:(t,e)=>"subscribe"===e?e=>(o.add(e),e(t),()=>o.delete(e)):e in n?(...c)=>{const r=n[e](t,...c);return r&&"object"==typeof r&&(Object.assign(t,r),o.forEach(e=>e(t))),r}:t[e],set:(t,e,n)=>(t[e]=n,o.forEach(e=>e(t)),!0)})}function e(t){return e=>{const n=t.subscribe(()=>{e.update?.()});return Object.defineProperty(e,"store",{get:()=>t,configurable:!0}),e.t=n,e}}export{t as createStore,e as withStore};